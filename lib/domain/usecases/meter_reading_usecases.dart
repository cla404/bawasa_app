import '../entities/meter_reading.dart';
import '../repositories/meter_reading_repository.dart';
import 'dart:io';

class SubmitMeterReadingUseCase {
  final MeterReadingRepository _repository;

  SubmitMeterReadingUseCase(this._repository);

  Future<MeterReading> call({
    required String meterType,
    required double readingValue,
    required DateTime readingDate,
    String? notes,
    String? photoUrl,
  }) async {
    final reading = MeterReading(
      id: '', // Will be generated by database
      user_id_ref: '', // Will be set by repository
      meterType: meterType,
      readingValue: readingValue,
      readingDate: readingDate,
      notes: notes,
      photoUrl: photoUrl,
      status: 'pending',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    return await _repository.submitMeterReading(reading);
  }
}

class SubmitMeterReadingWithPhotoUseCase {
  final MeterReadingRepository _repository;

  SubmitMeterReadingWithPhotoUseCase(this._repository);

  Future<MeterReading> call({
    required String meterType,
    required double readingValue,
    required DateTime readingDate,
    String? notes,
    File? photoFile,
  }) async {
    final reading = MeterReading(
      id: '', // Will be generated by database
      user_id_ref: '', // Will be set by repository
      meterType: meterType,
      readingValue: readingValue,
      readingDate: readingDate,
      notes: notes,
      photoUrl: null, // Will be set after photo upload
      status: 'pending',
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
    );

    return await _repository.submitMeterReadingWithPhoto(reading, photoFile);
  }
}

class GetUserMeterReadingsUseCase {
  final MeterReadingRepository _repository;

  GetUserMeterReadingsUseCase(this._repository);

  Future<List<MeterReading>> call() async {
    return await _repository.getUserMeterReadings();
  }
}

class GetLatestMeterReadingUseCase {
  final MeterReadingRepository _repository;

  GetLatestMeterReadingUseCase(this._repository);

  Future<MeterReading?> call() async {
    return await _repository.getLatestMeterReading();
  }
}

class UpdateMeterReadingUseCase {
  final MeterReadingRepository _repository;

  UpdateMeterReadingUseCase(this._repository);

  Future<MeterReading> call(MeterReading reading) async {
    return await _repository.updateMeterReading(reading);
  }
}

class DeleteMeterReadingUseCase {
  final MeterReadingRepository _repository;

  DeleteMeterReadingUseCase(this._repository);

  Future<void> call(String readingId) async {
    return await _repository.deleteMeterReading(readingId);
  }
}
