import '../entities/meter_reading_submission.dart';
import '../entities/consumer.dart';
import '../repositories/meter_reading_repository.dart';
import 'dart:io';

class SubmitMeterReadingForConsumerUseCase {
  final MeterReadingRepository _repository;

  SubmitMeterReadingForConsumerUseCase(this._repository);

  Future<MeterReadingSubmission> call({
    required String consumerId,
    required double previousReading,
    required double presentReading,
    String? remarks,
    File? meterImageFile,
  }) async {
    // Calculate consumption
    final numberOfConsumption = (presentReading - previousReading).round();

    final submission = MeterReadingSubmission(
      id: '', // Will be generated by database
      previousReading: previousReading,
      presentReading: presentReading,
      numberOfConsumption: numberOfConsumption,
      remarks: remarks,
      createdAt: DateTime.now(),
      consumerId: consumerId,
      meterImage: null, // Will be set after image upload
    );

    return await _repository.submitMeterReadingForConsumer(
      submission,
      meterImageFile,
    );
  }
}

class GetConsumersForMeterReaderUseCase {
  final MeterReadingRepository _repository;

  GetConsumersForMeterReaderUseCase(this._repository);

  Future<List<Consumer>> call() async {
    return await _repository.getConsumersForMeterReader();
  }
}

class GetConsumerByIdUseCase {
  final MeterReadingRepository _repository;

  GetConsumerByIdUseCase(this._repository);

  Future<Consumer?> call(String consumerId) async {
    return await _repository.getConsumerById(consumerId);
  }
}
